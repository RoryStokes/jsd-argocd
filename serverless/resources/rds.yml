Resources:
  RDSPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: The database password
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        IncludeSpace: false
        ExcludeCharacters: '"@/\'
        GenerateStringKey: password
        SecretStringTemplate: '{"username": "master"}'
      Name: ${self:service}-credentials
  RDSAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group providing RDS access.
      GroupName: rds-access-sg
      VpcId: !ImportValue core-infra-${self:provider.stage}-VPCId
  RDSDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Postgres RDS instance
      GroupName: rds-db-sg
      VpcId: !ImportValue core-infra-${self:provider.stage}-VPCId
  OutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - RDSDatabaseSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - RDSAccessSecurityGroup
          - GroupId
  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId:
        Fn::GetAtt:
          - RDSAccessSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - RDSDatabaseSecurityGroup
          - GroupId
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: db subnet so rds will use our VPC, rather than creating it's own
      SubnetIds:
        - !ImportValue core-infra-${self:provider.stage}-Subnet01
        - !ImportValue core-infra-${self:provider.stage}-Subnet02
        - !ImportValue core-infra-${self:provider.stage}-Subnet03
  RDSCluster:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: rds
      DeletionProtection: 'false'
      MultiAZ: 'false'
      Engine: Postgres
      MasterUsername: '{{resolve:secretsmanager:${self:service}-credentials:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:${self:service}-credentials:SecretString:password}}'
      DBInstanceClass: 'db.t2.micro'
      AllocatedStorage: '10'
      StorageEncrypted: 'false'
      VPCSecurityGroups:
        - !GetAtt RDSDatabaseSecurityGroup.GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
    DeletionPolicy: 'Delete'
    DependsOn:
      - RDSPassword
      - RDSDatabaseSecurityGroup
Outputs:
  DBAccessSG:
    Value: !GetAtt RDSAccessSecurityGroup.GroupId
    Export:
      Name: ${self:service}-db-access
  DBHost:
    Value:
      Fn::GetAtt:
        - RDSCluster
        - Endpoint.Address
    Export:
      Name: ${self:service}-db-host